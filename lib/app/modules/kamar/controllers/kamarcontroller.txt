// import 'package:get/get.dart';

// class KamarController extends GetxController {
//   //TODO: Implement HomeController

//   final count = 0.obs;



//   void increment() => count.value++;
// }

import 'package:flutter/widgets.dart';  
import 'package:get/get.dart';  
import 'package:get_storage/get_storage.dart';  

class KamarController extends GetxController {  
  var selectedImagePath = ''.obs;  
  var dateController = TextEditingController();  
  var nameController = TextEditingController(); // Nama  
  var phoneController = TextEditingController(); // No. HP  
  var nikController = TextEditingController(); // NIK  
  var roomTypeController = TextEditingController(); // Jenis Kamar  
  var payments = [].obs; // List of payment dates  
  var roomList = <String>[].obs; // Daftar kamar


  void resetController(String roomName) {
    // Reset data controller atau set default untuk setiap kamar baru
    nameController.text = '';
    phoneController.text = '';
    nikController.text = '';
    roomTypeController.text = '';
    payments.clear();
    selectedImagePath.value = '';
  }

  // Fungsi untuk menyimpan data ke GetStorage  
  Future<void> saveData() async {  
    final box = GetStorage();

    // Menyimpan data seperti nama, no HP, NIK, dll  
    await box.write('selectedImagePath', selectedImagePath.value);  
    await box.write('date', dateController.text);  
    await box.write('name', nameController.text);  // Simpan Nama  
    await box.write('phone', phoneController.text); // Simpan No. HP  
    await box.write('nik', nikController.text); // Simpan NIK  
    await box.write('roomType', roomTypeController.text); // Simpan Jenis Kamar  
    await box.write('payments', payments.map((payment) => payment['date'].toString()).toList());  
    await box.write('roomList', roomList); // Simpan daftar kamar  
  }  

  // Fungsi untuk menghapus data dari GetStorage  
  Future<void> clearData() async {  
    final box = GetStorage();
    
    await box.remove('selectedImagePath');  
    await box.remove('date');  
    await box.remove('name');  
    await box.remove('phone');  
    await box.remove('nik');  
    await box.remove('roomType');  
    await box.remove('payments');  
    // await box.remove('roomList'); // Hapus daftar kamar  
    resetController('');
    // loadData();
  }  

  // Fungsi untuk menambah pembayaran  
  void addPayment() {  
    payments.add({'date': DateTime.now().toString()});  
  }  

  // Fungsi untuk menghapus pembayaran  
  void removePayment(int index) {  
    payments.removeAt(index);  
  }  

  // Fungsi untuk menambah kamar  
  void addRoom(String roomName) {  
    roomList.add(roomName);  
  }  

  @override  
  void onInit() async {  
    super.onInit();
    // Pastikan GetStorage sudah diinisialisasi
    await GetStorage.init();
    // Memuat data yang tersimpan saat aplikasi dimulai
    loadData();
  }  

  // Fungsi untuk memuat data dari GetStorage  
  Future<void> loadData() async {  
    final box = GetStorage();

    // Memuat data dari storage, jika tidak ada maka set default
    selectedImagePath.value = box.read('selectedImagePath') ?? '';  
    dateController.text = box.read('date') ?? '';  
    nameController.text = box.read('name') ?? '';  // Memuat Nama  
    phoneController.text = box.read('phone') ?? ''; // Memuat No. HP  
    nikController.text = box.read('nik') ?? ''; // Memuat NIK  
    roomTypeController.text = box.read('roomType') ?? ''; // Memuat Jenis Kamar  
    
    List<String> paymentDates = box.read('payments') ?? [];  
    payments.value = paymentDates.map((date) => {'date': date}).toList();  

    // Memuat daftar kamar  
    List<String> savedRoomList = box.read('roomList') ?? [];  
    roomList.value = savedRoomList;  
  }  
}




UPDATEEEE
import 'package:flutter/widgets.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';

class KamarController extends GetxController {
  var selectedRoom = ''.obs; // Kamar yang dipilih
  var selectedImagePath = ''.obs;
  var dateController = TextEditingController();
  var nameController = TextEditingController(); // Nama
  var phoneController = TextEditingController(); // No. HP
  var nikController = TextEditingController(); // NIK
  var roomTypeController = TextEditingController(); // Jenis Kamar
  var payments = [].obs; // List of payment dates
  var roomList = <String>[].obs; // Daftar kamar

  void resetController() {
    // Reset data controller atau set default untuk setiap kamar baru
    nameController.text = '';
    phoneController.text = '';
    nikController.text = '';
    roomTypeController.text = '';
    payments.clear();
    selectedImagePath.value = '';
  }

  // Fungsi untuk menyimpan data ke GetStorage berdasarkan kamar yang dipilih
  Future<void> saveData() async {
    final box = GetStorage();

    if (selectedRoom.value.isNotEmpty) {
      // Key penyimpanan berdasarkan nama kamar
      String roomKey = 'room_${selectedRoom.value}';

      // Menyimpan data seperti nama, no HP, NIK, dll
      await box.write('${roomKey}_selectedImagePath', selectedImagePath.value);
      await box.write('${roomKey}_date', dateController.text);
      await box.write('${roomKey}_name', nameController.text);
      await box.write('${roomKey}_phone', phoneController.text);
      await box.write('${roomKey}_nik', nikController.text);
      await box.write('${roomKey}_roomType', roomTypeController.text);
      await box.write('${roomKey}_payments', payments.map((payment) => payment['date'].toString()).toList());

      }
  }

  // Fungsi untuk memuat data dari GetStorage berdasarkan kamar yang dipilih
  Future<void> loadData() async {
    final box = GetStorage();

    if (selectedRoom.value.isNotEmpty) {
      // Key penyimpanan berdasarkan nama kamar
      String roomKey = 'room_${selectedRoom.value}';

      // Memuat data dari storage, jika tidak ada maka set default
      selectedImagePath.value = box.read('${roomKey}_selectedImagePath') ?? '';
      dateController.text = box.read('${roomKey}_date') ?? '';
      nameController.text = box.read('${roomKey}_name') ?? '';
      phoneController.text = box.read('${roomKey}_phone') ?? '';
      nikController.text = box.read('${roomKey}_nik') ?? '';
      roomTypeController.text = box.read('${roomKey}_roomType') ?? '';

      List<String> paymentDates = box.read('${roomKey}_payments') ?? [];

      payments.value = paymentDates.map((date) => {'date': date}).toList();
    } else {
      resetController(); // Jika tidak ada kamar yang dipilih, reset data
    }
  }

  // Fungsi untuk mengatur kamar yang dipilih dan memuat datanya
  void selectRoom(String roomName) {
    selectedRoom.value = roomName;
    loadData();
  }

  // Fungsi untuk menambah kamar
  void addRoom(String roomName) {
    roomList.add(roomName);
    selectedRoom.value = roomName;
    resetController(); // Reset data untuk kamar baru
  }

  @override
  void onInit() async {
    super.onInit();
    await GetStorage.init();
    loadData(); // Memuat data saat aplikasi diinisialisasi
  }
}
